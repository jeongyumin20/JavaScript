const a = 1;
{
  const b = 2;
  {
    const c = 3;
    console.log(a); // 1 출력 가능 : 스코프 내부에서 외부 참조 가능
  }
}
console.log(c); // 에러 발생 : 스코프 외부에서 내부 참조 불가능

// 렉 메커니즘 안에서 어떻게 외부 참조가 되는 건가?
// 실행 컨텍스트가 정보를 가지고 있기 때문에

// 실행 컨텍스트에서 이 해당 스코프의 정보를 가지고 있는 객체를 관리한다
// 그 객체를 가지고 있는 환경을 알아보고 정리하자

// 가장 안쪽 스코프부터 정의가 된다 : 먼저 해당 객체 만들어지고
/*
  {
    const c = 3;
    console.log(a); // 1 출력 가능 : 스코프 내부에서 외부 참조 가능
  }
*/

// 두번째 스코프 b 변수 가지고 있는 오브젝트가 만들어진다
/* 
{
  const b = 2;
  {
    const c = 3;
    console.log(a); // 1 출력 가능 : 스코프 내부에서 외부 참조 가능
  }
}
*/

// 마지막 전역변수 정보 가지고 있는 스코프 만들어진다
/* 
const a = 1;
{
  const b = 2;
  {
    const c = 3;
    console.log(a); 
  }
}
console.log(c);
*/
